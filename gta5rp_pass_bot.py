
import os
import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ConversationHandler,
    filters,
)
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
LEVEL, DATE = range(2)

def get_total_xp(level):
    return sum(1000 + i * 100 for i in range(level))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ GTA 5 RP.

–°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —É—Ä–æ–≤–µ–Ω—å?")
    return LEVEL

async def get_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        level = int(update.message.text)
        if level < 1 or level > 100:
            raise ValueError
        context.user_data["level"] = level
        await update.message.reply_text("üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-11):")
        return DATE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return LEVEL

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        level = context.user_data["level"]
        date_str = update.message.text
        current_date = datetime.strptime(date_str, "%Y-%m-%d")

        current_xp = get_total_xp(level)
        final_xp = get_total_xp(100)
        remaining_xp = final_xp - current_xp
        days_needed = (remaining_xp + 5999) // 6000

        completion_date = current_date + timedelta(days=days_needed)
        await update.message.reply_text(
            f"‚úÖ –ï—Å–ª–∏ –≤—ã –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ –∏ —Å–µ–≥–æ–¥–Ω—è {date_str},\n—Ç–æ –±–æ–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è **{completion_date.date()}**.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    except Exception:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-11).")
        return DATE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def main():
    from nest_asyncio import apply
    apply()

    app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_level)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    await app.run_polling()

if __name__ == '__main__':
    import asyncio

    try:
        asyncio.run(main())
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
